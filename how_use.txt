üíª How to Use
The script can be executed at different frequency levels, depending on the type of monitoring you require.

Basic Syntax:

Bash

ruby pg_monitor.rb [frequency_level] # Note: Script name is pg_monitor.rb
Available Frequency Levels:

high: High-frequency monitoring (CPU, I/O, Connections, Long Transactions, Cache Hit Ratio, Transaction ID Wraparound). Ideal for execution every 1-5 minutes.

medium: Medium-frequency monitoring (Inefficient Autovacuum, Unused/Redundant Indexes). Ideal for hourly execution.

low: Low-frequency monitoring (Top 10 Slow Queries, Disk Usage). Ideal for daily execution.

corruption_test: Tests data and index integrity using pg_amcheck. Ideal for weekly execution.

daily_log_scan: Scans PostgreSQL logs for failed login attempts and records them. Ideal for daily execution (after log rotation).

weekly_login_summary: Generates and sends an email with a weekly summary of failed login attempts. Ideal for weekly execution.

table_size_history: Saves table size history for growth tracking and planning. Ideal for daily execution.

Usage Examples:

Bash

# Execute high-frequency monitoring
ruby pg_monitor.rb high

# Scan security logs daily
ruby pg_monitor.rb daily_log_scan

# Run a corruption test
ruby pg_monitor.rb corruption_test
‚è∞ Example Cron Configuration
To automate execution, add the lines below to your crontab (type crontab -e in the terminal). Ensure the path to the script is correct and that environment variables (PG_USER, PG_PASSWORD, EMAIL_PASSWORD) are loaded.

Bash

# CRONTAB Example
# IMPORTANT: Replace /path/to/your/pg_monitor with the actual directory where you cloned the project.
# Ensure PG_USER, PG_PASSWORD, EMAIL_PASSWORD are set in your cron environment.
# You can set them directly in cron, or source a file (e.g., ~/.bashrc or a dedicated env file)
# before running the script. Example:
# 0 5 * * * /usr/bin/ruby pg_monitor.rb high >> /var/log/pg_monitor_high.log 2>&1

# High-Frequency Monitoring (every 5 minutes)
*/5 * * * * /usr/bin/ruby pg_monitor.rb high >> /var/log/pg_monitor_high.log 2>&1

# Medium-Frequency Monitoring (every hour)
0 * * * * cd /path/to/your/pg_monitor /usr/bin/ruby pg_monitor.rb medium >> /var/log/pg_monitor_medium.log 2>&1

# Low-Frequency / Daily Analysis (once daily, at 2 AM)
0 2 * * * /usr/bin/ruby pg_monitor.rb low >> /var/log/pg_monitor_low.log 2>&1

# Daily Security Log Scan (once daily, at 3 AM)
0 3 * * * /usr/bin/ruby pg_monitor.rb daily_log_scan >> /var/log/pg_monitor_log_scan.log 2>&1

# Table Size History (once daily, at 3:30 AM)
30 3 * * * /usr/bin/ruby pg_monitor.rb table_size_history >> /var/log/pg_monitor_table_size.log 2>&1

# Corruption Test (weekly, every Sunday at 4 AM)
0 4 * * 0 /usr/bin/ruby pg_monitor.rb corruption_test >> /var/log/pg_monitor_corruption.log 2>&1

# Weekly Failed Logins Summary (weekly, every Sunday at 4:30 AM)
30 4 * * 0 /usr/bin/ruby pg_monitor.rb weekly_login_summary >> /var/log/pg_monitor_weekly_summary.log 2>&1
Important: Adjust /path/to/your/pg_monitor to the actual base directory where you cloned the repository. Crucial: In the cron examples, remember to replace "your_db_user", "your_db_password", and "your_email_password" with your actual, sensitive credentials. This is a common way to pass environment variables directly to a cron job. For more secure, large-scale deployments, consider dedicated environment management tools or systemd service files.

üìù Important Notes
Email Alerts: When an alert is detected (e.g., CPU threshold exceeded), an email will be sent to the receiver_email defined in pg_monitor_config.yml.

Local Time in Alerts: All timestamps in email alerts will reflect the local time of the server executing the script (e.g., "Monitoramento HIGH em 06/07/2025 13:57:05 (Goi√¢nia, GO, Brasil) detectou os seguintes problemas/informa√ß√µes:").
